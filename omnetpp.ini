[General]
network = DiffservNetwork
sim-time-limit = 6000s #simulates for this long
#cmdenv-express-mode = false
cmdenv-interactive=true

**.result-recording-modes =
**.scalar-recording = false #true = records results
debug-statistics-recording = true

# default queues
**.queueType = "DropTailQueue"
**.queue.frameCapacity = 10
#**.queue.dataQueue.frameCapacity = 100000

total-stack = 7MiB
tkenv-plugin-path = ../../../etc/plugins


[Config Apps]
**.H{1..9}.numTcpApps = 1 #tcp client
**.H{10..12}.numUdpApps = 1   #udp client

**.H{1..9}.tcpApp[0].typename = "TCPSessionApp" #tcp type
**.H{10..12}.udpApp[0].typename = "UDPBasicApp" #udp type

##set up tcp apps
##sends AF1, AF2 and AF3 traffic
**.H{1..9}.tcpApp[0].sendBytes = 6500000B #   6.5MB
**.H{1..9}.tcpApp[0].active = true
**.H{1..9}.tcpApp[0].localPort = 10020

**.H1.tcpApp[0].connectAddress = "H15"
**.H2.tcpApp[0].connectAddress = "H15"
**.H3.tcpApp[0].connectAddress = "H15"

**.H4.tcpApp[0].connectAddress = "H16"
**.H5.tcpApp[0].connectAddress = "H16"
**.H6.tcpApp[0].connectAddress = "H16"

**.H7.tcpApp[0].connectAddress = "H17"
**.H8.tcpApp[0].connectAddress = "H17"
**.H9.tcpApp[0].connectAddress = "H17"

**.H{1..9}.tcpApp[0].connectPort = 10021
**.H{1..9}.tcpApp[0].tOpen = 0.0s
**.H{1..9}.tcpApp[0].tSend = 20ms
**.H{1..9}.tcpApp[0].sendScript = ""
**.H{1..9}.tcpApp[0].tClose = 6000s

##set up udp app
##sends BE traffic
**.H{10..12}.udpApp[0].destPort = 10021
**.H{10..12}.udpApp[0].startTime = uniform(0.0s,0.0s)
**.H{10..12}.udpApp[0].messageLength = 40B 
**.H{10..12}.udpApp[0].stopTime = 6000s
**.H{10..12}.udpApp[0].sendInterval = 40ms
**.H10.udpApp[0].destAddresses = "H18"
**.H11.udpApp[0].destAddresses = "H18"
**.H12.udpApp[0].destAddresses = "H18"

#tcp servers
**.H{15..17}.numTcpApps = 1
**.H{15..17}.tcpApp[0].typename = "TCPSinkApp"
**.H{15..17}.tcpApp[0].localPort = 10021

##set up udp server
**.H18.numUdpApps = 1 
**.H18.udpApp[0].typename = "UDPSink"
**.H18.udpApp[0].localPort = 10021

## Both tcp and udp client-server send packets
##RED function with WRR scheduler non-zero weight
[Config RED_WRR]
extends = Apps
#**.coreDatarate = 200 kbps #no rate-mismatch
**.coreDatarate = 50 kbps # rate-mismatch

#tcp traffic
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcpType = "TCP"

#classifier at Traffic Conditioner
**.R?.eth[*].ingressTCType = "TrafficCond"
**.ingressTC.numClasses = 4 #AF1 AF2 AF3 BE
**.ingressTC.classifier.filters = xmldoc("filters.xml", "//experiment[@id='default']") #classifies 4 class types AF1 AF2 AF3 BE

#AF1 meter
**.ingressTC.meterAF1.cir = "100kbps"
**.ingressTC.meterAF1.cbs = 30000B

#AF2 meter
**.ingressTC.meterAF2.cir = "100kbps"
**.ingressTC.meterAF2.cbs = 30000B

#AF3 meter
**.ingressTC.meterAF3.cir = "100kbps"
**.ingressTC.meterAF3.cbs = 30000B

#marker at traffic conditioner
**.ingressTC.marker.dscps = "AF11 AF12 AF21 AF22 AF31 AF32 BE"

#type of queue for RED
**.R?.ppp[*].queueType = "DiffServQueue"
#**.R?.ppp[*].queue.frameCapacity = 30

#set up maxp, minth, maxth for RED
#                     AF11  AF12  AF21  AF22  AF31  AF32   B#
**.R?.**.red.minths = "9    9      7     6    4      4      1"
**.R?.**.red.maxths = "10   10     8     8    6      6      4"
**.R?.**.red.maxps = "0.10 0.20   0.30 0.40  0.60  0.70    0.9"

#WRR scheduler
**.R?.**.wrr.weights = "1 1 1 1 1" #AF1, AF2, AF3, BE, Default , equal weight scenario 1, and 3
#**.R?.**.wrr.weights = "0 0 0 0 0" #AF1, AF2, AF3, BE, Default , FCFS, scenario 2
#**.R?.**.wrr.weights = "8 6 4 2 0" #AF1, AF2, AF3, BE, Default , diff weight scenario 4

#statistics TCP apps
**.H{1..9}.tcpApp[*].sentPk.result-recording-modes = count
**.H{15..17}.tcpApp[*].rcvdPk.result-recording-modes = count
**.H{15..17}.tcpApp[*].endToEndDelay.result-recording-modes = vector # for computing median
**.tcpApp[*].sentPk*.scalar-recording = true
**.tcpApp[*].rcvdPk*.scalar-recording = true
**.tcpApp[*].endToEndDelay*.scalar-recording = true

#statistics UDP app
**.H{10..12}.udpApp[*].sentPk.result-recording-modes = count
**.H18.udpApp[*].rcvdPk.result-recording-modes = count
**.H18.udpApp[*].endToEndDelay.result-recording-modes = vector # for computing median
**.udpApp[*].sentPk*.scalar-recording = true
**.udpApp[*].rcvdPk*.scalar-recording = true
**.udpApp[*].endToEndDelay*.scalar-recording = true

#statistics for R1 and R2
**.R1.ppp[0].**Queue.rcvdPk.result-recording-modes = count
**.R1.ppp[0].**Queue.dropPk.result-recording-modes = count
**.R1.ppp[0].**Queue.queueLength.result-recording-modes = timeavg, vector
**.R1.ppp[0].**Queue.queueingTime.result-recording-modes = vector # for computing median
**.R1.ppp[0].**Queue.*.scalar-recording = true

#statistics for queue
**.af1Queue.*.scalar-recording = true
**.af2Queue.*.scalar-recording = true
**.af3Queue.*.scalar-recording = true
**.beQueue.*.scalar-recording = true
**.defaultQueue.*.scalar-recording = true

[Config NoRED_WRR]
extends = Apps
**.coreDatarate = 50 kbps #rate-mismatch
#**.coreDatarate = 200 kbps #no rate-mismatch

#tcp traffic
description = "inet_TCP <---> inet_TCP"
# default TCP implementation
**.tcpType = "TCP"

#classifier at Traffic Conditioner
**.R?.eth[*].ingressTCType = "TrafficCond"
**.ingressTC.numClasses = 4 #AF1 AF2 AF3 BE
**.ingressTC.classifier.filters = xmldoc("filters.xml", "//experiment[@id='default']") #classifies 4 class types AF1 AF2 AF3 BE

#AF1 meter
**.ingressTC.meterAF1.cir = "100kbps"
**.ingressTC.meterAF1.cbs = 30000B

#AF2 meter
**.ingressTC.meterAF2.cir = "100kbps"
**.ingressTC.meterAF2.cbs = 30000B

#AF3 meter
**.ingressTC.meterAF3.cir = "100kbps"
**.ingressTC.meterAF3.cbs = 30000B

#marker at traffic conditioner
**.ingressTC.marker.dscps = "AF11 AF12 AF21 AF22 AF31 AF32 BE"

#type of queue for NO-RED
**.R?.ppp[*].queueType = "DiffServQueue2"
**.R?.ppp[*].queue.frameCapacity = 10

#WRR scheduler
#**.R?.**.wrr.weights = "1 1 1 1 1" #AF1, AF2, AF3, BE, Default , equal weight scenario 1, and 3
**.R?.**.wrr.weights = "1 1 1 1 1" #AF1, AF2, AF3, BE, Default , FCFS, scenario 2
#**.R?.**.wrr.weights = "8 6 4 2 0" #AF1, AF2, AF3, BE, Default , diff weight scenario 4

#statistics TCP apps
**.H{1..9}.tcpApp[*].sentPk.result-recording-modes = count
**.H{15..17}.tcpApp[*].rcvdPk.result-recording-modes = count
**.H{15..17}.tcpApp[*].endToEndDelay.result-recording-modes = vector # for computing median
**.tcpApp[*].sentPk*.scalar-recording = true
**.tcpApp[*].rcvdPk*.scalar-recording = true
**.tcpApp[*].endToEndDelay*.scalar-recording = true
**.H{15}.numPcapRecorders = 1
**.H{15}.pcapRecorder[0].pcapFile = "results/analysis/server.pcap"

#statistics UDP app
**.H{10..12}.udpApp[*].sentPk.result-recording-modes = count
**.H18.udpApp[*].rcvdPk.result-recording-modes = count
**.H18.udpApp[*].endToEndDelay.result-recording-modes = vector # for computing median
**.udpApp[*].sentPk*.scalar-recording = true
**.udpApp[*].rcvdPk*.scalar-recording = true
**.udpApp[*].endToEndDelay*.scalar-recording = true

#statistics for R1 and R2
**.R1.ppp[0].**Queue.rcvdPk.result-recording-modes = count
**.R1.ppp[0].**Queue.dropPk.result-recording-modes = count
**.R1.ppp[0].**Queue.queueLength.result-recording-modes = timeavg, vector
**.R1.ppp[0].**Queue.queueingTime.result-recording-modes = vector # for computing median
**.R1.ppp[0].**Queue.*.scalar-recording = true

**.R2.ppp[0].**Queue.rcvdPk.result-recording-modes = count
**.R2.ppp[0].**Queue.dropPk.result-recording-modes = count
**.R2.ppp[0].**Queue.queueLength.result-recording-modes = timeavg, vector
**.R2.ppp[0].**Queue.queueingTime.result-recording-modes = vector # for computing median
**.R2.ppp[0].**Queue.*.scalar-recording = true

#statistics for queue
**.af1Queue.*.scalar-recording = true
**.af2Queue.*.scalar-recording = true
**.af3Queue.*.scalar-recording = true
**.beQueue.*.scalar-recording = true
**.defaultQueue.*.scalar-recording = true



